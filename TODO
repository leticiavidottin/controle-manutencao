ğŸ“Œ ClienteService
Criar um novo cliente garantindo que e-mails e telefones nÃ£o sejam duplicados.
Buscar um cliente pelo ID e retornar erro caso nÃ£o exista.
Atualizar os dados do cliente.
Listar todos os clientes cadastrados.
Deletar um cliente apenas se nÃ£o houver ordens de serviÃ§o vinculadas.

ğŸ“Œ EquipamentoService
Cadastrar um novo equipamento vinculando-o a um cliente existente.
Buscar equipamentos de um cliente especÃ­fico.
Atualizar dados do equipamento.
Deletar um equipamento apenas se nÃ£o houver ordens de serviÃ§o associadas.

ğŸ“Œ OrdemServicoService
Criar uma nova ordem de serviÃ§o associada a um cliente e equipamento.
Buscar ordens de serviÃ§o em aberto e concluÃ­das.
Atualizar o status de uma ordem (exemplo: "Em andamento", "ConcluÃ­do").
Validar se uma ordem de serviÃ§o pode ser fechada (exemplo: precisa ter pelo menos um serviÃ§o registrado).
Gerar um nÃºmero Ãºnico para cada ordem de serviÃ§o.

ğŸ“Œ ServicoService
Registrar o inÃ­cio e fim de um serviÃ§o dentro de uma ordem de serviÃ§o.
Validar se a ordem de serviÃ§o jÃ¡ foi finalizada antes de adicionar novos serviÃ§os.
Atualizar a descriÃ§Ã£o do serviÃ§o realizado.
Calcular o tempo total gasto no serviÃ§o.

ğŸ“Œ AcompanhamentoService
Adicionar registros de acompanhamento Ã  ordem de serviÃ§o (exemplo: "Aguardando peÃ§a").
Permitir ediÃ§Ã£o dos registros de acompanhamento antes do fechamento da ordem.
Listar todos os acompanhamentos de uma ordem de serviÃ§o.

ğŸ”¹ Regras Gerais
Evitar lÃ³gicas de negÃ³cio no controller: Todas as verificaÃ§Ãµes, validaÃ§Ãµes e regras de negÃ³cio devem estar na service.
Tratar exceÃ§Ãµes: Se um item nÃ£o for encontrado, lanÃ§ar erro adequado para evitar problemas no frontend.
Garantir integridade dos dados: Evitar a exclusÃ£o de registros que ainda tenham dependÃªncias.